# -*- coding: utf-8 -*-
"""financial_analysis_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1UBtrWml5J8dq_UZtEnQYgag4XXXoWoYQ
"""

import streamlit as st
import requests
import pandas as pd
import numpy as np

# Replace with your FinancialModelingPrep API key
API_KEY = '?apikey=r8K3hlHzDqJ78VMdJ94l1FUQEw50QV9I'
BASE_URL = 'https://financialmodelingprep.com/api/v3/'

def fetch_data_with_error_handling(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        if isinstance(data, list) and len(data) == 0:
            st.warning("Received empty data.")
            return None
        return data
    except requests.exceptions.HTTPError as http_err:
        st.error(f"HTTP error occurred: {http_err}")
    except requests.exceptions.RequestException as err:
        st.error(f"Request error: {err}")
    except ValueError:
        st.error("Received invalid JSON response.")
    return None

def fetch_financial_statements(ticker):
    income_statement_url = f'{BASE_URL}income-statement/{ticker}?apikey={API_KEY}'
    income_statement = fetch_data_with_error_handling(income_statement_url)
    balance_sheet_url = f'{BASE_URL}balance-sheet-statement/{ticker}?apikey={API_KEY}'
    balance_sheet = fetch_data_with_error_handling(balance_sheet_url)
    cash_flow_url = f'{BASE_URL}cash-flow-statement/{ticker}?apikey={API_KEY}'
    cash_flow = fetch_data_with_error_handling(cash_flow_url)
    return income_statement, balance_sheet, cash_flow

def calculate_ratios(income_statement, balance_sheet, cash_flow):
    if not income_statement or not balance_sheet or not cash_flow:
        st.error("Missing data for ratio calculations.")
        return None

    try:
        revenue = income_statement[0]['revenue']
        net_income = income_statement[0]['netIncome']
        total_assets = balance_sheet[0]['totalAssets']
        total_equity = balance_sheet[0]['totalStockholdersEquity']

        net_profit_margin = net_income / revenue if revenue else None
        return_on_assets = net_income / total_assets if total_assets else None
        return_on_equity = net_income / total_equity if total_equity else None

        current_assets = balance_sheet[0]['totalCurrentAssets']
        current_liabilities = balance_sheet[0]['totalCurrentLiabilities']
        current_ratio = current_assets / current_liabilities if current_liabilities else None

        total_debt = balance_sheet[0]['totalDebt']
        debt_to_equity = total_debt / total_equity if total_equity else None

        total_revenue = income_statement[0]['revenue']
        inventory = balance_sheet[0]['inventory']
        inventory_turnover = total_revenue / inventory if inventory else None

        ratios = {
            'Net Profit Margin': net_profit_margin,
            'Return on Assets': return_on_assets,
            'Return on Equity': return_on_equity,
            'Current Ratio': current_ratio,
            'Debt to Equity Ratio': debt_to_equity,
            'Inventory Turnover': inventory_turnover
        }
        return ratios
    except KeyError as e:
        st.error(f"Missing key in financial data - {e}")
        return None
    except TypeError as e:
        st.error(f"Type error in financial data - {e}")
        return None

def calculate_dcf(cash_flow, balance_sheet, market_cap, beta, risk_free_rate, market_return):
    if not cash_flow or not balance_sheet:
        st.error("Missing data for DCF calculation.")
        return None

    try:
        fcf = cash_flow[0]['freeCashFlow']
        cost_of_equity = risk_free_rate + beta * (market_return - risk_free_rate)
        total_debt = balance_sheet[0]['totalDebt']
        interest_expense = cash_flow[0]['interestPaid'] if cash_flow[0]['interestPaid'] else 0
        cost_of_debt = interest_expense / total_debt if total_debt else 0

        debt_to_equity_ratio = total_debt / market_cap
        wacc = (cost_of_equity * (1 - debt_to_equity_ratio)) + (cost_of_debt * debt_to_equity_ratio)

        growth_rate = 0.05
        fcf_list = [fcf * (1 + growth_rate)**i for i in range(1, 6)]
        terminal_value = fcf_list[-1] * (1 + growth_rate) / (wacc - growth_rate)

        dcf_value = sum([fcf / (1 + wacc)**i for i, fcf in enumerate(fcf_list)]) + terminal_value / (1 + wacc)**5
        return dcf_value
    except KeyError as e:
        st.error(f"Missing key in financial data - {e}")
        return None
    except TypeError as e:
        st.error(f"Type error in financial data - {e}")
        return None

# Streamlit app setup
st.title("Financial Analysis Tool")

ticker = st.text_input("Enter stock ticker symbol (e.g., AAPL):").upper()

if ticker:
    income_statement, balance_sheet, cash_flow = fetch_financial_statements(ticker)

    if income_statement and balance_sheet and cash_flow:
        ratios = calculate_ratios(income_statement, balance_sheet, cash_flow)
        st.write("### Financial Ratios")
        st.json(ratios)

        market_cap = st.number_input("Enter Market Cap (in dollars):", value=250000000000)
        beta = st.number_input("Enter Beta:", value=1.2)
        risk_free_rate = st.number_input("Enter Risk-Free Rate (e.g., 0.02 for 2%):", value=0.02)
        market_return = st.number_input("Enter Market Return (e.g., 0.08 for 8%):", value=0.08)

        dcf_value = calculate_dcf(cash_flow, balance_sheet, market_cap, beta, risk_free_rate, market_return)
        st.write(f"### DCF Value: ${dcf_value:.2f}")
    else:
        st.error("Failed to retrieve financial statements.")